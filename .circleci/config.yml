# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1

workflows:
  build_and_deploy:
    jobs:
      - build
      - deploy:
          filters:  # using regex filters requires the entire branch to match
            branches:
              only:  # only branches matching the below regex filters will run
                - master
          requires:
            - build

jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:11-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:12.2
      #   environment:
      #     POSTGRES_USER: root

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "server/build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: cd server && ./gradlew dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "server/build.gradle" }}

      # run tests!
      # - run: cd server && ./gradlew test

      - setup_remote_docker

      - run: docker login --username=_ --password=${HEROKU_TOKEN} registry.heroku.com

      - run: cd server && ./gradlew bootBuildImage --imageName=registry.heroku.com/${HEROKU_APP}/web
      - run: docker push registry.heroku.com/${HEROKU_APP}/web
      - run: cd backend/OpenJdkReleaseInformationCollector/lambda && ./gradlew --warning-mode all clean build -x test
  deploy:
    docker:
      - image: circleci/openjdk:11-jdk-buster-node
    steps:
      - checkout

      - setup_remote_docker

      - run: docker login --username=_ --password=${HEROKU_TOKEN} registry.heroku.com

      - run: docker pull registry.heroku.com/${HEROKU_APP}/web:latest

      - run:
          name: Release Heroku application
          command: > 
            .circleci/heroku_release.sh

      - run:
          name: Release Lambda Functions
          command: >
            cd backend/OpenJdkReleaseInformationCollector && 
            npm install &&
            npx cdk deploy -c jdbc=jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_SCHEMA} -c user=${DB_USERNAME} -c password=${DB_PASSWORD}
      - slack/status:
          fail_only: true
orbs:
  slack: circleci/slack@3.4.2
  